name: Process a newly sent release
run-name: "Process a newly sent release"
on:
  push:
    branches: "release-v*"
    tags:
      - "v*"
jobs:
  setup:
    
    name: 🛠️ Setup and test the release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: 🎇 Set an environment variable for possible hot fixes
        run: |
          VARREF=${{ github.ref_name }}
          VARREF=${VARREF//release-}
          echo "ref_name=${VARREF}" >> $GITHUB_ENV
      - name: 🪜 Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: 🪤 Check for conventional commit
        uses: wagoid/commitlint-github-action@v4
      - name: 🛎️ Create a release branch
        uses: actions/github-script@v6
        with:
          script: |
            try{
            await github.request('POST /repos/{owner}/{repo}/git/refs', {
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: 'refs/heads/release-${{env.ref_name}}',
            sha: context.sha
            })
            }catch{}
      - name: 🔧 Setup NodeJS
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
      - name: 💾 Cache the NPM dependencies
        uses: actions/cache@v3
        id: cache-primes
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
      - name: 📥 Install the dependencies
        if: steps.cache-primes.outputs.cache-hit != 'true'
        run: npm ci
      - name: 🧪 Run the tests
        uses: ./.github/actions/run-tests
  create:
    name: 📝 Generate the record
    needs: setup
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
      - name: 🎇 Set an environment variable for possible hot fixes
        run: |
          VARREF=${{ github.ref_name }}
          VARREF=${VARREF//release-}
          echo "ref_name=${VARREF}" >> $GITHUB_ENV
      - name: 🪜 Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: 📝 Generate the changelog
        uses: orhun/git-cliff-action@v2
        id: git-cliff
        with:
          config: cliff.toml
          args: --latest
      - name: 🖋️ Create a record for the release
        uses: actions/github-script@v6
        id: add_record
        with:
          result-encoding: string
          script: |
            const response = await github.rest.search.issuesAndPullRequests({
              q:`repo:${{github.repository}} is:issue "${{env.ref_name}}" in:title is:closed`
            })
            const foundIssues = response.data.items
            
            const changelogWithAuthor = `${{steps.git-cliff.outputs.content}}`.replace("$AUTHOR_USERNAME","[@${{github.actor}}](https://github.com/${{github.actor}})")

            const searchData = {
              owner: context.repo.owner,
                repo: context.repo.repo
            }
            const dataToWrite = {
                ...searchData,
                labels:["RELEASE"],
                title: "Release ${{env.ref_name}}",
                body: changelogWithAuthor,
                assignees:["${{github.actor}}"]
            }
            let issue;
            if(foundIssues.length > 0){
                issue = await github.rest.issues.update({
                  issue_number:foundIssues[0].number,
                  ...searchData,
                  state:"opened"
                })
                await github.rest.issues.createComment({
                ...searchData,
                issue_number:issue.data.number,
                body:`🚨 Some changes have been made to the release.\n${dataToWrite.body}`
            })
            } else{
            issue = await github.rest.issues.create(dataToWrite)
            }
            await github.rest.issues.createComment({
                ...searchData,
                issue_number:issue.data.number,
                body:`✅ All tests has succeeded. The results are published on https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}.`
            })
            return issue.data.number
    outputs:
      issue_number: ${{steps.add_record.outputs.result}}
  deploy:
    name: 📤 Deploy to Github Pages
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: create
    permissions:
      contents: read
      pages: write
      id-token: write
      issues: write
    concurrency:
      group: "pages"
      cancel-in-progress: false
    steps:
      - name: 🪜 Checkout
        uses: actions/checkout@v3
      - name: 🔨 Setup Github Pages
        uses: actions/configure-pages@v3
      - name: 🔧 Setup Node.JS
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
      - name: 📥 Get the NPM dependencies from cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
      - name: 📦 Build the app
        run: npm run build
      - name: 💾 Save the app artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: './build'
      - name: 📤 Deploy the app
        id: deployment
        uses: actions/deploy-pages@v2
      - name: 🖋️ Add the app URL to the release record
        uses: actions/github-script@v6
        with:
          script: |
            const issueNumber = ${{needs.create.outputs.issue_number}}
            const data = {
              owner:context.repo.owner,
              repo:context.repo.repo,
              issue_number:issueNumber
            }
            const issue = await github.rest.issues.get(data)
            
            if(!issue){
              return core.setFailed(`The issue #${issueNumber} was not found. Aborting...`)
            }
            await github.rest.issues.createComment({...data,body:"🎉 The app was deployed to ${{steps.deployment.outputs.page_url}}."})
  finish:
    name: 🏁 Finish the release
    runs-on: ubuntu-latest
    permissions: write-all
    needs: [create,deploy]
    steps:
      - name: 🪜 Checkout
        uses: actions/checkout@v3
      - name: 🔒 Close the record
        uses: actions/github-script@v6
        with:
          script: |
            const issueNumber = ${{needs.create.outputs.issue_number}}
            const data = {
              owner:context.repo.owner,
              repo:context.repo.repo,
              issue_number:issueNumber
            }
            await github.rest.issues.createComment({
              ...data,
              body:'🏁 The release has been fully finished. The record is closed.'
            })
            github.rest.issues.update({
              ...data,
              state:"closed"
            })
